package com.reubenpeeris.wippen.engine;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import com.reubenpeeris.wippen.expression.Building;
import com.reubenpeeris.wippen.expression.Card;
import com.reubenpeeris.wippen.expression.Expression;
import com.reubenpeeris.wippen.expression.Pile;
import com.reubenpeeris.wippen.expression.Rank;

/**
 * Describes a valid move.
 */
public class Move {
	private final Expression expression;
	private final Set<Pile> tablePilesUsed;
	private final Card handCardUsed;
	private final Type type;
	private final int playerPosition;
	
	public enum Type {
		BUILD, CAPTURE, DISCARD
	}
	
	public Move(Expression expression, int playerPosition, Type type, Set<Pile> tablePilesUsed, Card handCardUsed) {
		if (expression == null || type == null || tablePilesUsed == null || handCardUsed == null) {
			throw new IllegalArgumentException();
		}
		
		this.expression = expression;
		this.playerPosition = playerPosition;
		this.type = type;
		this.tablePilesUsed = Collections.unmodifiableSet(new HashSet<Pile>(tablePilesUsed));
		this.handCardUsed = handCardUsed;
	}
	
	public Type getType() {
		return type;
	}

	public Set<Pile> getTablePilesUsed() {
		return tablePilesUsed;
	}

	public Card getHandCardUsed() {
		return handCardUsed;
	}
	
	public Collection<Card> getCardsUsed() {
		Set<Card> cardsUsed = new HashSet<Card>();
		for (Pile pile : tablePilesUsed) {
			cardsUsed.addAll(pile.getCards());
		}
		
		cardsUsed.add(handCardUsed);
		
		return cardsUsed;
	}
	
	/**
	 * Returns the pile that is generated by this move. If no pile is generated return null;
	 * 
	 * @return pile generated
	 */
	public Pile getPileGenerated() {
		if (type == Type.BUILD) {
			return new Building(getCardsUsed(), new Rank(expression.getValue()), playerPosition);
		} else if (type == Type.DISCARD) {
			return expression.getPiles().iterator().next();
		} else {
			return null;
		}
	}
	
	public Expression getExpression() {
		return expression;
	}

	@Override
	public String toString() {
		return type + ":" + expression.toString();
	}
}