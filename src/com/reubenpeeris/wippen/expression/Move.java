package com.reubenpeeris.wippen.expression;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import lombok.Getter;

import com.reubenpeeris.wippen.engine.Player;

/**
 * Describes a valid move.
 */
//Immutable if made with hand and table provided by engine. The isValidFor method will check this.
@Getter
public class Move extends Expression {
	private final Expression expression;
	private final Set<Pile> tablePilesUsed;
	private final Card handCardUsed;
	private final Type type;
	private final Player player;
	
	private final Collection<Pile> table;
	private final Collection<Card> hand;
		
	public enum Type {
		BUILD, CAPTURE, DISCARD
	}
	
	Move(Expression expression, Player player, Collection<Pile> table, Collection<Card> hand, Type type, Set<Pile> tablePilesUsed, Card handCardUsed) {
		if (expression == null || player == null || type == null || tablePilesUsed == null || handCardUsed == null) {
			throw new IllegalArgumentException();
		}
		
		this.expression = expression;
		this.player = player;
		this.table = table;
		this.hand = hand;
		
		this.type = type;
		this.tablePilesUsed = Collections.unmodifiableSet(new HashSet<Pile>(tablePilesUsed));
		this.handCardUsed = handCardUsed;
	}
	
	/**
	 * Returns the pile that is generated by this move. If no pile is generated return null;
	 * 
	 * @return pile generated
	 */
	public Pile getPileGenerated() {
		if (type == Type.BUILD) {
			return new Building(getCards(), new Rank(expression.getValue()), player);
		} else if (type == Type.DISCARD) {
			return expression.getPiles().iterator().next();
		} else {
			return null;
		}
	}
	
	public Expression getExpression() {
		return expression;
	}
	
	public boolean isValidFor(Collection<Pile> table, Collection<Card> hand, Player player) {
		if (table == null || hand == null || player == null) {
			throw new IllegalArgumentException();
		}
		
		return this.player == player && this.table == table && this.hand == hand;
	}

	@Override
	public String toString() {
		return type + ":" + expression.toString();
	}

	@Override
	public int getValue() {
		return expression.getValue();
	}

	@Override
	public Collection<Pile> getPiles() {
		return expression.getPiles();
	}

	@Override
	public Collection<Card> getCards() {
		return expression.getCards();
	}
}