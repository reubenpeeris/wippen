package com.reubenpeeris.wippen.engine;

import static com.reubenpeeris.wippen.engine.TestContext.*;
import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.StringWriter;
import java.util.Collections;
import java.util.List;

import lombok.SneakyThrows;

import org.apache.commons.io.IOUtils;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.ExpectedSystemExit;

import com.reubenpeeris.wippen.robot.Robot;

public class WippenTest extends BaseCommandLineTest {
	private static final int PARAMETER_PARSING_EXIT_CODE = 1;
	private static final String WRONG_NUMBER_OF_ROBOTS_ERROR = "Main parameters are required to have between 2 and 4 robots (\"robot1 robot2 [robot3 [robot4]]\")\n";
	private static final String MOCK_ROBOT_URL = "class:com.reubenpeeris.wippen.engine.MockRobot";
	private static final String[] VALID_ROBOT_URL_PARAMETERS = { MOCK_ROBOT_URL, MOCK_ROBOT_URL };
	private static final ScoreKeeper EMPTY_SCORE_KEEPER = new ScoreKeeper(Collections.<Player> emptyList());

	@Rule
	public final ExpectedSystemExit exit = ExpectedSystemExit.none();

	@Test
	public void constructor_requires_matchRunner() {
		expect(NullPointerException.class, "matchRunner");
		new Wippen(null);
	}

	@Test
	public void main_method_requires_matchRunner() {
		expect(NullPointerException.class, "args");
		Wippen.main((String[]) null);
	}

	@Test
	public void run_requires_args() {
		Wippen wippen = new Wippen(matchRunner);
		expect(NullPointerException.class, "args");
		wippen.run((String[]) null);
	}

	@Test
	public void less_than_2_robots_is_invalid() {
		expectedError(WRONG_NUMBER_OF_ROBOTS_ERROR);
		Wippen.main(MOCK_ROBOT_URL);
	}

	@Test
	public void more_than_4_robots_is_invalid() {
		expectedError(WRONG_NUMBER_OF_ROBOTS_ERROR);
		Wippen.main(MOCK_ROBOT_URL, MOCK_ROBOT_URL, MOCK_ROBOT_URL, MOCK_ROBOT_URL, MOCK_ROBOT_URL);
	}

	@Test
	public void main_method_can_execute() {
		expectedStdOut = null;
		Wippen.main(MOCK_ROBOT_URL, MOCK_ROBOT_URL);
	}

	@Test
	public void summary_of_game_is_printed_before_start() {
		expectedStdOut = getExpectedDefaultStartMessageFor2Robots();
		Wippen wippen = new Wippen(new MatchRunner(setRunner) {
			@Override
			public ScoreKeeper runMatch(List<Robot> robots, int firstGame, int sets) {
				return EMPTY_SCORE_KEEPER;
			}
		});
		wippen.run(MOCK_ROBOT_URL, MOCK_ROBOT_URL);
	}

	@Test
	public void summary_of_game_is_printed_at_end() {
		expectedStdOut = getExpectedDefaultStartMessageFor2Robots() + getExpectedDefaultEndMessageFor2Robots();
		Wippen wippen = new Wippen(new MatchRunner(setRunner));
		wippen.run(MOCK_ROBOT_URL, MOCK_ROBOT_URL);
	}

	@Test
	public void invalid_robot_url_prints_error() {
		String robot = "nonsense:robot";
		expectedError(String.format("Unable to create robot for parameter, problem was: No suitable loader found for url: '%s'\n", robot));
		Wippen.main(MOCK_ROBOT_URL, robot);
	}

	@Test
	public void having_2_robots_is_valid() {
		verifyNumberOfRobotsPassedToMatchRunner(MOCK_ROBOT_URL, MOCK_ROBOT_URL);
	}

	@Test
	public void having_4_robots_is_valid() {
		verifyNumberOfRobotsPassedToMatchRunner(MOCK_ROBOT_URL, MOCK_ROBOT_URL, MOCK_ROBOT_URL, MOCK_ROBOT_URL);
	}

	@Test
	public void check_default_options() {
		Wippen wippen = new Wippen(new MatchRunner(setRunner) {
			@Override
			public ScoreKeeper runMatch(List<Robot> robots, int firstGame, int sets) {
				assertThat(firstGame, is(0));
				assertThat(sets, is(100));
				return EMPTY_SCORE_KEEPER;
			}
		});

		wippen.run(VALID_ROBOT_URL_PARAMETERS);
	}

	@Test
	public void only_message_is_printed_if_WIppenRuleException_is_thrown() {
		final String message = "this is a messge";
		Wippen wippen = new Wippen(new MatchRunner(setRunner) {
			@Override
			public ScoreKeeper runMatch(List<Robot> robots, int firstGame, int sets) {
				throw new WippenRuleException(message);
			}
		});
		exit.expectSystemExit();
		expectedStdErr = message + "\n";
		wippen.run(VALID_ROBOT_URL_PARAMETERS);
	}

	@Test
	public void full_stack_trace_is_printed_if_general_exception_is_thrown() throws Exception {
		final IllegalArgumentException exception = new IllegalArgumentException();
		Wippen wippen = new Wippen(new MatchRunner(setRunner) {
			@Override
			public ScoreKeeper runMatch(List<Robot> robots, int firstGame, int sets) {
				throw exception;
			}
		});

		try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
			try (PrintStream ps = new PrintStream(baos)) {
				exception.printStackTrace(ps);
				expectedStdErr = baos.toString("UTF-8");
			}
		}

		exit.expectSystemExit();
		wippen.run(VALID_ROBOT_URL_PARAMETERS);
	}

	@Test
	public void help_message_printed_if_help_option_given() {
		assertHelpMessagePrintedForOption("--help");
	}

	@Test
	public void help_message_printed_if_h_option_given() {
		assertHelpMessagePrintedForOption("-h");
	}

	@Test
	public void verify_sets_option_is_passed_to_MatchRunner_as_sets() {
		verifySetsParameterIsSet("--sets");
	}

	@Test
	public void verify_s_option_is_passed_to_MatchRunner_as_sets() {
		verifySetsParameterIsSet("-s");
	}

	@Test
	public void non_integer_value_for_sets_gives_error_message() {
		assertNonIntegerGivesErrorMessageForOption("-s");
	}

	@Test
	public void negative_value_for_sets_gives_error_message() {
		assertNegativeValueGivesErrorMessageForOption("-s");
	}

	@Test
	public void verify_game_option_is_passed_to_MatchRunner_as_firstGame() {
		verifyFirstSetParameterIsSet("--first-set");
	}

	@Test
	public void verify_f_option_is_passed_to_MatchRunner_as_firstGame() {
		verifyFirstSetParameterIsSet("-f");
	}

	@Test
	public void non_integer_value_for_first_set_gives_error_message() {
		assertNonIntegerGivesErrorMessageForOption("-f");
	}

	@Test
	public void unknown_option_results_in_error_message() {
		String unknownOption = "--unknown";
		expectedError(String.format("Unknown option: %s%n", unknownOption));
		runWippenWithOptions(unknownOption);
	}

	@Test
	public void factory_produces_new_instance_each_time() {
		Wippen instance1 = Wippen.create();
		Wippen instance2 = Wippen.create();
		assertThat(instance1, is(not(nullValue())));
		assertThat(instance1, is(not(sameInstance(instance2))));
	}

	private void assertNegativeValueGivesErrorMessageForOption(String option) {
		String negative = "-10";
		expectedError(String.format("\"%s\": couldn't convert \"%s\" to a positive integer%n", option, negative));
		runWippenWithOptions(option, negative);
	}

	private void assertNonIntegerGivesErrorMessageForOption(String option) {
		String nonInteger = "non-integer";
		expectedError(String.format("\"%s\": couldn't convert \"%s\" to an integer%n", option, nonInteger));
		runWippenWithOptions(option, nonInteger);
	}

	private void verifySetsParameterIsSet(String optionName) {
		final int value = 10;
		Wippen wippen = new Wippen(new MatchRunner(setRunner) {
			@Override
			public ScoreKeeper runMatch(List<Robot> robots, int firstGame, int sets) {
				assertThat(sets, is(equalTo(value)));
				return EMPTY_SCORE_KEEPER;
			}
		});

		runWippenWithOptions(wippen, optionName, Integer.toString(value));
	}

	private void verifyFirstSetParameterIsSet(String optionName) {
		final int value = 10;
		Wippen wippen = new Wippen(new MatchRunner(setRunner) {
			@Override
			public ScoreKeeper runMatch(List<Robot> robots, int firstSet, int sets) {
				assertThat(firstSet, is(equalTo(value)));
				return EMPTY_SCORE_KEEPER;
			}
		});

		runWippenWithOptions(wippen, optionName, Integer.toString(value));
	}

	private void runWippenWithOptions(String... options) {
		runWippenWithOptions(new Wippen(new MatchRunner(setRunner) {
			@Override
			public ScoreKeeper runMatch(List<Robot> robots, int firstGame, int sets) {
				return EMPTY_SCORE_KEEPER;
			}
		}), options);
	}

	private void runWippenWithOptions(Wippen wippen, String... options) {
		String[] args = new String[options.length + VALID_ROBOT_URL_PARAMETERS.length];

		System.arraycopy(VALID_ROBOT_URL_PARAMETERS, 0, args, 0, VALID_ROBOT_URL_PARAMETERS.length);
		System.arraycopy(options, 0, args, VALID_ROBOT_URL_PARAMETERS.length, options.length);

		wippen.run(args);
	}

	private void assertHelpMessagePrintedForOption(String option) {
		Wippen wippen = new Wippen(new MatchRunner(setRunner) {
			@Override
			public ScoreKeeper runMatch(List<Robot> robots, int firstGame, int sets) {
				fail();
				return EMPTY_SCORE_KEEPER;
			}
		});
		expectedStdOut(getExpectedHelpMessage());
		wippen.run(option);
	}

	private void expectedStdOut(String expectedStdOut) {
		this.expectedStdOut = expectedStdOut;
	}

	private void expectedError(String expectedStdErr) {
		this.expectedStdErr = expectedStdErr;
		exit.expectSystemExitWithStatus(PARAMETER_PARSING_EXIT_CODE);
	}

	private void verifyNumberOfRobotsPassedToMatchRunner(final String... robotUrls) {
		Wippen wippen = new Wippen(new MatchRunner(setRunner) {
			@Override
			public ScoreKeeper runMatch(List<Robot> robots, int firstGame, int sets) {
				assertThat(robots.size(), is(robotUrls.length));
				return EMPTY_SCORE_KEEPER;
			}
		});

		wippen.run(robotUrls);
	}

	private String getExpectedHelpMessage() {
		return getMessage("/ExpectedHelpMessage.txt");
	}

	private String getExpectedDefaultStartMessageFor2Robots() {
		return getMessage("/ExpectedDefaultStartMessageFor2Robots.txt");
	}

	private String getExpectedDefaultEndMessageFor2Robots() {
		return getMessage("/ExpectedDefaultEndMessageFor2Robots.txt");
	}

	@SneakyThrows(IOException.class)
	private String getMessage(String file) {
		try (InputStream inputStream = WippenTest.class.getResourceAsStream(file)) {
			StringWriter writer = new StringWriter();
			IOUtils.copy(inputStream, writer, "UTF-8");
			return writer.toString();
		}
	}
}
